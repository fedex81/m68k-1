package de.codersourcery.m68k.assembler.arch;

public enum AddressingMode
{
    DATA_REGISTER_DIRECT              (0b000), // MOVE D0,...
    ADDRESS_REGISTER_DIRECT           (0b001), // MOVE A0,...
    ADDRESS_REGISTER_INDIRECT         (0b010), // MOVE (A0),...
    ADDRESS_REGISTER_INDIRECT_POST_INCREMENT   (0b011), // MOVE (A0)+,...
    ADDRESS_REGISTER_INDIRECT_PRE_DECREMENT    (0b100), // MOVE -(A0),...
    ADDRESS_REGISTER_INDIRECT_WITH_DISPLACEMENT(0b101), // MOVE $0a(A0),... / MOVE ($0a,A0),...
    ADDRESS_REGISTER_INDIRECT_WITH_DISPLACEMENT_AND_SCALE(0b101), // MOVE $0a(A0,Xn.SIZE*SCALE),... / MOVE ($0a,A0,XN*SIZE*SCALE),...
    ADDRESS_REGISTER_INDIRECT_WITH_DISPLACEMENT_AND_SCALE_OPTIONAL(0b110), // MOVE $0a(A0,Xn.SIZE*SCALE,$ab) / MOVE ($0a,A0,Xn.SIZE*SCALE,$ab)
    PROGRAM_COUNTER_INDIRECT_WITH_DISPLACEMENT(0b111), // MOVE $10(PC), ... / MOVE ($10,PC), ...
    // separate instructions , no encoding
    IMMEDIATE_VALUE(0b000),   // move #$1234,A0
    IMMEDIATE_ADDRESS(0b000), // LEA $1234,A0
    NO_OPERAND(0b00),
    MEMORY_INDIRECT(0b111); // used by instructions that only support less than 2 operands when asking for the unsupported operand

    public final int bits;
    private AddressingMode(int bits)
    {
        this.bits = bits;
    }
}
